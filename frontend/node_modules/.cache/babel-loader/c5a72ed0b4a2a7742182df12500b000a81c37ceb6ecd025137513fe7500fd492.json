{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';class AnalyticsService{constructor(){this.axiosInstance=axios.create({baseURL:\"\".concat(API_BASE_URL,\"/api/analytics/\"),headers:{'Content-Type':'application/json'}});}async analyzeData(request){try{const response=await this.axiosInstance.post('analyze/',request);return response.data;}catch(error){console.error('Error analyzing data:',error);throw new Error('Failed to analyze data');}}async getBusinessMetrics(){try{const response=await this.axiosInstance.get('metrics/');return response.data;}catch(error){console.error('Error fetching business metrics:',error);throw new Error('Failed to fetch business metrics');}}async performCohortAnalysis(request){try{const response=await this.axiosInstance.post('cohort/',request);return response.data;}catch(error){console.error('Error performing cohort analysis:',error);throw new Error('Failed to perform cohort analysis');}}async getSmartInsights(request){try{const response=await this.axiosInstance.post('insights/',request);return response.data;}catch(error){console.error('Error generating smart insights:',error);throw new Error('Failed to generate smart insights');}}async getAnalysisReports(sessionId){try{const params=sessionId?{session_id:sessionId}:{};const response=await this.axiosInstance.get('reports/',{params});return response.data;}catch(error){console.error('Error fetching analysis reports:',error);throw new Error('Failed to fetch analysis reports');}}async getAnalysisReportDetail(reportId){try{const response=await this.axiosInstance.get(\"reports/\".concat(reportId,\"/\"));return response.data;}catch(error){console.error('Error fetching analysis report detail:',error);throw new Error('Failed to fetch analysis report detail');}}}export const analyticsService=new AnalyticsService();","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","AnalyticsService","constructor","axiosInstance","create","baseURL","concat","headers","analyzeData","request","response","post","data","error","console","Error","getBusinessMetrics","get","performCohortAnalysis","getSmartInsights","getAnalysisReports","sessionId","params","session_id","getAnalysisReportDetail","reportId","analyticsService"],"sources":["/Users/ashu/Desktop/warehouse-copilot/rag-sql-assistant/frontend/src/services/analyticsService.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nexport interface AnalyticsRequest {\n  query: string;\n  analysis_type?: string;\n  session_id?: string;\n}\n\nexport interface BusinessMetricsResponse {\n  success: boolean;\n  metrics: {\n    customer_metrics: {\n      total_customers: number;\n      premium_customer_rate: number;\n      avg_credit_score: number;\n      avg_annual_income: number;\n    };\n    account_metrics: {\n      total_accounts: number;\n      total_balance: number;\n      avg_account_balance: number;\n      negative_balance_rate: number;\n    };\n    loan_metrics: {\n      total_loans: number;\n      total_loan_portfolio: number;\n      total_outstanding: number;\n      default_rate: number;\n      avg_interest_rate: number;\n    };\n    transaction_metrics: {\n      monthly_transaction_count: number;\n      monthly_transaction_volume: number;\n      avg_transaction_amount: number;\n    };\n  };\n  calculated_at: string;\n}\n\nexport interface CohortAnalysisRequest {\n  cohort_type: 'customer_acquisition' | 'transaction_behavior' | 'loan_performance';\n  time_period: 'monthly' | 'quarterly' | 'yearly';\n}\n\nexport interface SmartInsightsRequest {\n  query: string;\n}\n\nexport interface Insight {\n  type: string;\n  title: string;\n  description: string;\n  significance: number;\n  metric: string;\n  value: number;\n}\n\nexport interface VisualizationConfig {\n  type: 'histogram' | 'bar' | 'line' | 'scatter' | 'pie';\n  title: string;\n  x_column: string;\n  y_column?: string;\n  description: string;\n}\n\nexport interface AnalysisResult {\n  success: boolean;\n  query_result: {\n    success: boolean;\n    data: any[][];\n    columns: string[];\n    row_count: number;\n  };\n  analysis: {\n    descriptive: any;\n    statistical: any;\n    insights: Insight[];\n    visualizations: VisualizationConfig[];\n    recommendations: string[];\n    metadata: {\n      analysis_type: string;\n      row_count: number;\n      column_count: number;\n    };\n  };\n  analysis_type: string;\n}\n\nclass AnalyticsService {\n  private axiosInstance = axios.create({\n    baseURL: `${API_BASE_URL}/api/analytics/`,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  async analyzeData(request: AnalyticsRequest): Promise<AnalysisResult> {\n    try {\n      const response = await this.axiosInstance.post('analyze/', request);\n      return response.data;\n    } catch (error) {\n      console.error('Error analyzing data:', error);\n      throw new Error('Failed to analyze data');\n    }\n  }\n\n  async getBusinessMetrics(): Promise<BusinessMetricsResponse> {\n    try {\n      const response = await this.axiosInstance.get('metrics/');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching business metrics:', error);\n      throw new Error('Failed to fetch business metrics');\n    }\n  }\n\n  async performCohortAnalysis(request: CohortAnalysisRequest): Promise<any> {\n    try {\n      const response = await this.axiosInstance.post('cohort/', request);\n      return response.data;\n    } catch (error) {\n      console.error('Error performing cohort analysis:', error);\n      throw new Error('Failed to perform cohort analysis');\n    }\n  }\n\n  async getSmartInsights(request: SmartInsightsRequest): Promise<any> {\n    try {\n      const response = await this.axiosInstance.post('insights/', request);\n      return response.data;\n    } catch (error) {\n      console.error('Error generating smart insights:', error);\n      throw new Error('Failed to generate smart insights');\n    }\n  }\n\n  async getAnalysisReports(sessionId?: string): Promise<any> {\n    try {\n      const params = sessionId ? { session_id: sessionId } : {};\n      const response = await this.axiosInstance.get('reports/', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching analysis reports:', error);\n      throw new Error('Failed to fetch analysis reports');\n    }\n  }\n\n  async getAnalysisReportDetail(reportId: number): Promise<any> {\n    try {\n      const response = await this.axiosInstance.get(`reports/${reportId}/`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching analysis report detail:', error);\n      throw new Error('Failed to fetch analysis report detail');\n    }\n  }\n}\n\nexport const analyticsService = new AnalyticsService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}