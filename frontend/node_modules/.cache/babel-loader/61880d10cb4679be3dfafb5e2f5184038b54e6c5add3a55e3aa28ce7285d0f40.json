{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';const api=axios.create({baseURL:\"\".concat(API_BASE_URL,\"/api\"),headers:{'Content-Type':'application/json'}});export const chatAPI={sendMessage:async request=>{const response=await api.post('/chat/',request);return response.data;},getSession:async sessionId=>{const response=await api.get(\"/chat/sessions/\".concat(sessionId,\"/\"));return response.data;},listSessions:async()=>{const response=await api.get('/chat/sessions/');return response.data;}};export const databaseAPI={executeQuery:async query=>{const response=await api.post('/database/execute/',{query});return response.data;},testConnection:async()=>{const response=await api.get('/database/test/');return response.data;},listTables:async()=>{const response=await api.get('/database/tables/');return response.data;},getTableInfo:async tableName=>{const response=await api.get(\"/database/tables/\".concat(tableName,\"/\"));return response.data;}};export const embeddingsAPI={searchSchemas:async function(query){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:3;const response=await api.post('/embeddings/search/',{query,limit});return response.data;},listSchemas:async()=>{const response=await api.get('/embeddings/schemas/');return response.data;},embedSchema:async data=>{const response=await api.post('/embeddings/embed/',data);return response.data;}};export default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","concat","headers","chatAPI","sendMessage","request","response","post","data","getSession","sessionId","get","listSessions","databaseAPI","executeQuery","query","testConnection","listTables","getTableInfo","tableName","embeddingsAPI","searchSchemas","limit","arguments","length","undefined","listSchemas","embedSchema"],"sources":["/Users/ashu/Desktop/warehouse-copilot/rag-sql-assistant/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { ChatRequest, ChatResponse, ChatSession, QueryResult, ApiResponse } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: `${API_BASE_URL}/api`,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const chatAPI = {\n  sendMessage: async (request: ChatRequest): Promise<ChatResponse> => {\n    const response = await api.post('/chat/', request);\n    return response.data;\n  },\n\n  getSession: async (sessionId: string): Promise<ChatSession> => {\n    const response = await api.get(`/chat/sessions/${sessionId}/`);\n    return response.data;\n  },\n\n  listSessions: async (): Promise<ChatSession[]> => {\n    const response = await api.get('/chat/sessions/');\n    return response.data;\n  },\n};\n\nexport const databaseAPI = {\n  executeQuery: async (query: string): Promise<QueryResult> => {\n    const response = await api.post('/database/execute/', { query });\n    return response.data;\n  },\n\n  testConnection: async (): Promise<ApiResponse> => {\n    const response = await api.get('/database/test/');\n    return response.data;\n  },\n\n  listTables: async (): Promise<ApiResponse<string[]>> => {\n    const response = await api.get('/database/tables/');\n    return response.data;\n  },\n\n  getTableInfo: async (tableName: string): Promise<ApiResponse> => {\n    const response = await api.get(`/database/tables/${tableName}/`);\n    return response.data;\n  },\n};\n\nexport const embeddingsAPI = {\n  searchSchemas: async (query: string, limit: number = 3): Promise<ApiResponse> => {\n    const response = await api.post('/embeddings/search/', { query, limit });\n    return response.data;\n  },\n\n  listSchemas: async (): Promise<ApiResponse> => {\n    const response = await api.get('/embeddings/schemas/');\n    return response.data;\n  },\n\n  embedSchema: async (data: {\n    table_name: string;\n    ddl_statement: string;\n    description?: string;\n  }): Promise<ApiResponse> => {\n    const response = await api.post('/embeddings/embed/', data);\n    return response.data;\n  },\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}